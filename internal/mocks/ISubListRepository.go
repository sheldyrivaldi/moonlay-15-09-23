// Code generated by mockery v2.33.2. DO NOT EDIT.

package mocks

import (
	abstraction "moonlay-todolist/internal/abstraction"

	mock "github.com/stretchr/testify/mock"

	model "moonlay-todolist/internal/model"
)

// ISubListRepository is an autogenerated mock type for the ISubListRepository type
type ISubListRepository struct {
	mock.Mock
}

// Create provides a mock function with given fields: data
func (_m *ISubListRepository) Create(data *model.SubList) (*model.SubList, error) {
	ret := _m.Called(data)

	var r0 *model.SubList
	var r1 error
	if rf, ok := ret.Get(0).(func(*model.SubList) (*model.SubList, error)); ok {
		return rf(data)
	}
	if rf, ok := ret.Get(0).(func(*model.SubList) *model.SubList); ok {
		r0 = rf(data)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.SubList)
		}
	}

	if rf, ok := ret.Get(1).(func(*model.SubList) error); ok {
		r1 = rf(data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateFile provides a mock function with given fields: link, subListID
func (_m *ISubListRepository) CreateFile(link string, subListID string) (*model.SubListFile, error) {
	ret := _m.Called(link, subListID)

	var r0 *model.SubListFile
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (*model.SubListFile, error)); ok {
		return rf(link, subListID)
	}
	if rf, ok := ret.Get(0).(func(string, string) *model.SubListFile); ok {
		r0 = rf(link, subListID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.SubListFile)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(link, subListID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteByID provides a mock function with given fields: ID
func (_m *ISubListRepository) DeleteByID(ID string) (*model.SubList, error) {
	ret := _m.Called(ID)

	var r0 *model.SubList
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*model.SubList, error)); ok {
		return rf(ID)
	}
	if rf, ok := ret.Get(0).(func(string) *model.SubList); ok {
		r0 = rf(ID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.SubList)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(ID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteFileBySubListID provides a mock function with given fields: subListID
func (_m *ISubListRepository) DeleteFileBySubListID(subListID string) error {
	ret := _m.Called(subListID)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(subListID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindAll provides a mock function with given fields: d, t, p
func (_m *ISubListRepository) FindAll(d *string, t *string, p *abstraction.Pagination) (*[]model.SubList, *abstraction.PaginationInfo, error) {
	ret := _m.Called(d, t, p)

	var r0 *[]model.SubList
	var r1 *abstraction.PaginationInfo
	var r2 error
	if rf, ok := ret.Get(0).(func(*string, *string, *abstraction.Pagination) (*[]model.SubList, *abstraction.PaginationInfo, error)); ok {
		return rf(d, t, p)
	}
	if rf, ok := ret.Get(0).(func(*string, *string, *abstraction.Pagination) *[]model.SubList); ok {
		r0 = rf(d, t, p)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]model.SubList)
		}
	}

	if rf, ok := ret.Get(1).(func(*string, *string, *abstraction.Pagination) *abstraction.PaginationInfo); ok {
		r1 = rf(d, t, p)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*abstraction.PaginationInfo)
		}
	}

	if rf, ok := ret.Get(2).(func(*string, *string, *abstraction.Pagination) error); ok {
		r2 = rf(d, t, p)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// FindByID provides a mock function with given fields: ID
func (_m *ISubListRepository) FindByID(ID string) (*model.SubList, error) {
	ret := _m.Called(ID)

	var r0 *model.SubList
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*model.SubList, error)); ok {
		return rf(ID)
	}
	if rf, ok := ret.Get(0).(func(string) *model.SubList); ok {
		r0 = rf(ID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.SubList)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(ID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateByID provides a mock function with given fields: ID, data
func (_m *ISubListRepository) UpdateByID(ID string, data *model.SubList) (*model.SubList, error) {
	ret := _m.Called(ID, data)

	var r0 *model.SubList
	var r1 error
	if rf, ok := ret.Get(0).(func(string, *model.SubList) (*model.SubList, error)); ok {
		return rf(ID, data)
	}
	if rf, ok := ret.Get(0).(func(string, *model.SubList) *model.SubList); ok {
		r0 = rf(ID, data)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.SubList)
		}
	}

	if rf, ok := ret.Get(1).(func(string, *model.SubList) error); ok {
		r1 = rf(ID, data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewISubListRepository creates a new instance of ISubListRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewISubListRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *ISubListRepository {
	mock := &ISubListRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
